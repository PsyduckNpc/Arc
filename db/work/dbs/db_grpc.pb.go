// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: db/resources/proto/db.proto

package dbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbsClient is the client API for Dbs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbsClient interface {
	QueryCenterDataApi(ctx context.Context, in *CenterDataApi, opts ...grpc.CallOption) (*CenterDataApiVO, error)
	RpcServiceExec(ctx context.Context, in *DataContentDTO, opts ...grpc.CallOption) (*DataMapVO, error)
}

type dbsClient struct {
	cc grpc.ClientConnInterface
}

func NewDbsClient(cc grpc.ClientConnInterface) DbsClient {
	return &dbsClient{cc}
}

func (c *dbsClient) QueryCenterDataApi(ctx context.Context, in *CenterDataApi, opts ...grpc.CallOption) (*CenterDataApiVO, error) {
	out := new(CenterDataApiVO)
	err := c.cc.Invoke(ctx, "/dbs.Dbs/queryCenterDataApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbsClient) RpcServiceExec(ctx context.Context, in *DataContentDTO, opts ...grpc.CallOption) (*DataMapVO, error) {
	out := new(DataMapVO)
	err := c.cc.Invoke(ctx, "/dbs.Dbs/rpcServiceExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbsServer is the server API for Dbs service.
// All implementations must embed UnimplementedDbsServer
// for forward compatibility
type DbsServer interface {
	QueryCenterDataApi(context.Context, *CenterDataApi) (*CenterDataApiVO, error)
	RpcServiceExec(context.Context, *DataContentDTO) (*DataMapVO, error)
	mustEmbedUnimplementedDbsServer()
}

// UnimplementedDbsServer must be embedded to have forward compatible implementations.
type UnimplementedDbsServer struct {
}

func (UnimplementedDbsServer) QueryCenterDataApi(context.Context, *CenterDataApi) (*CenterDataApiVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCenterDataApi not implemented")
}
func (UnimplementedDbsServer) RpcServiceExec(context.Context, *DataContentDTO) (*DataMapVO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcServiceExec not implemented")
}
func (UnimplementedDbsServer) mustEmbedUnimplementedDbsServer() {}

// UnsafeDbsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbsServer will
// result in compilation errors.
type UnsafeDbsServer interface {
	mustEmbedUnimplementedDbsServer()
}

func RegisterDbsServer(s grpc.ServiceRegistrar, srv DbsServer) {
	s.RegisterService(&Dbs_ServiceDesc, srv)
}

func _Dbs_QueryCenterDataApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CenterDataApi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbsServer).QueryCenterDataApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbs.Dbs/queryCenterDataApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbsServer).QueryCenterDataApi(ctx, req.(*CenterDataApi))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dbs_RpcServiceExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataContentDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbsServer).RpcServiceExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbs.Dbs/rpcServiceExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbsServer).RpcServiceExec(ctx, req.(*DataContentDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// Dbs_ServiceDesc is the grpc.ServiceDesc for Dbs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dbs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbs.Dbs",
	HandlerType: (*DbsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryCenterDataApi",
			Handler:    _Dbs_QueryCenterDataApi_Handler,
		},
		{
			MethodName: "rpcServiceExec",
			Handler:    _Dbs_RpcServiceExec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db/resources/proto/db.proto",
}
